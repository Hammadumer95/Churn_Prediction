# -*- coding: utf-8 -*-
"""ChurnPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EfmmkOdhyz0PqSjF-jNg3-zzW5znzVg0
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from pylab import rcParams
# %matplotlib inline
# Loading the CSV with pandas
data = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
data.head()

data.info()

data.isnull().sum()

sizes = data['Churn'].value_counts(sort= True)
colors = ["blue","green"]
rcParams['figure.figsize'] = 5,5
plt.pie(sizes,colors=colors,autopct='%1.1f%%', shadow=True, startangle=270)
plt.title('Percentage of churn in dataset')
plt.show()

data.drop(['customerID'], axis = 1,inplace = True)

data['TotalCharges'].isnull().sum()

data['TotalCharges'].dtype

data.TotalCharges=pd.to_numeric(data.TotalCharges,errors='coerce')

data.TotalCharges.dtype

data.isnull().sum()

data.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)
data.dropna(subset = ["TotalCharges"], inplace=True)

data.isnull().sum()

data['gender'] = pd.get_dummies(data['gender'])
data.head()

data['Churn'].map({'Yes': 1, 'No': 0})
data.head()

data.loc[data.Churn=='No','Churn'] = 0 
data.loc[data.Churn=='Yes','Churn'] = 1

data.drop(['PaymentMethod'],axis=1,inplace=True)

data.head()

data['Partner'] = pd.get_dummies(data['Partner'])
data['Dependents'] = pd.get_dummies(data['Dependents'])
data['PhoneService'] = pd.get_dummies(data['PhoneService'])
data['MultipleLines'] = pd.get_dummies(data['MultipleLines'])
data['InternetService'] =pd.get_dummies(data['InternetService'])
data['OnlineSecurity'] = pd.get_dummies(data['OnlineSecurity'])
data['OnlineBackup'] = pd.get_dummies(data['OnlineBackup'])
data['DeviceProtection'] = pd.get_dummies(data['DeviceProtection'])
data['TechSupport'] = pd.get_dummies(data['TechSupport'])
data['StreamingTV'] = pd.get_dummies(data['StreamingTV'])
data['StreamingMovies'] = pd.get_dummies(data['StreamingMovies'])
data['Contract'] = pd.get_dummies(data['Contract'])
data['PaperlessBilling'] = pd.get_dummies(data['PaperlessBilling'])
#data['PaymentMethod'] = pd.get_dummies(data['PaymentMethod'])
data.head()

data['Churn'] = data['Churn'].astype(int)
Y = data['Churn'].values
X = data.drop(labels = ['Churn'],axis = 1)
# Create Train & Test Data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=101)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
result = model.fit(X_train, y_train)

from sklearn import metrics
prediction_test = model.predict(X_test)
# Print the prediction accuracy
print (metrics.accuracy_score(y_test, prediction_test))

# To get the weights of all the variables
weights = pd.Series(model.coef_[0],
 index=X.columns.values)
weights.sort_values(ascending = False)